model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  companyId     String?
  accounts      Account[]
  sessions      Session[]
  GeneratedDocs GeneratedDocs[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdDocs   Int             @default(0)
  allowedDocs   Int             @default(5)
  company       Company?        @relation(fields: [companyId], references: [id])
  role          UserRole        @default(USER)

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model GeneratedDocs {
  id                String   @id @default(cuid())
  content           String   @db.Text
  createdAt         DateTime @default(now())
  createdBy         String
  candidateName     String
  companyId         String
  documentTitle     String
  location          String
  rightToWork       String
  salaryExpectation String
  notes             String   @db.Text

  user    User     @relation(fields: [createdBy], references: [id])
  company Company? @relation(fields: [companyId], references: [id])

  @@map("generated_docs")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}
